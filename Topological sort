Problem : Given an adjacency list for a Directed Acyclic Graph (DAG) where adj_list[i] contains a list of all vertices j such that there is a directed edge from vertex i to 
          vertex j, with  V  vertices and E  edges, your task is to find any valid topological sorting of the graph.
          In a topological sort, for every directed edge u -> v,  u must come before v in the ordering.

Solution : void dfs(vector<int> adj[],vector<int>& visited,stack<int>& st,int idx){
	    visited[idx]=1;
	    for(auto it:adj[idx]){
	        if(visited[it]==0){
	            dfs(adj,visited,st,it);
	        }
	    }
	    st.push(idx);
	    return;
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    stack<int> st;
	    vector<int> visited(V,0);
	    for(int i=0;i<V;i++){
	        if(visited[i]==0){
	            dfs(adj,visited,st,i);
	        }
	    }
	    vector<int> ans;
	    while(!st.empty()){
	        ans.push_back(st.top());
	        st.pop();
	    }
	    return ans;
	}
