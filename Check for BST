Problem : Given the root of a binary tree. Check whether it is a BST or not.
          Note: We are considering that BSTs can not contain duplicate Nodes.
          A BST is defined as follows:
          The left subtree of a node contains only nodes with keys less than the node's key.
          The right subtree of a node contains only nodes with keys greater than the node's key.
          Both the left and right subtrees must also be binary search trees.
          
          Examples:
          Input:
             2
           /    \
          1      3
                  \
                   5
          Output: true 
          Explanation: 
          The left subtree of every node contains smaller keys and right subtree of every node contains greater. Hence, the tree is a BST.

Solution : 

bool check(Node* &root,int min,int max){
        if(root==NULL)
            return true;
        if(root->data<=min || root->data>=max)
            return false;
        return check(root->left,min,root->data)&&check(root->right,root->data,max);
    }
    bool isBST(Node* root) {
        return check(root,INT_MIN,INT_MAX);
    }
