Problem : Given an undirected graph with V vertices labelled from 0 to V-1 and E edges, check whether it contains any cycle or not. Graph is in the form of adjacency list 
          where adj[i] contains all the nodes ith node is having edge with.
          
          Example 1:
          Input:  
          V = 5, E = 5
          adj = {{1}, {0, 2, 4}, {1, 3}, {2, 4}, {1, 3}} 
          Output: 1

Solution : 

bool check(vector<int> adj[],vector<int>& visited,int i){
        visited[i]=true;
        queue<pair<int,int>> q;
        q.push({i,-1});
        while(!q.empty()){
            auto temp=q.front();
            q.pop();
            int value=temp.first;
            int parent=temp.second;
            for(auto it:adj[value]){
                if(visited[it]==false){
                    visited[it]=true;
                    q.push({it,value});
                }
                else if(it!=parent){
                    return true;
                }
            }
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        vector<int> visited(V,0);
        for(int i=0;i<V;i++){
            if(!visited[i]){
                if(check(adj,visited,i))
                    return true;
            }
        }
        return false;
    }
