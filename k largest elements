Problem : Given an array arr of n positive integers and an integer k, Your task is to return k largest elements in decreasing order. 
          
          Examples
          Input: arr[] = {12, 5, 787, 1, 23}, n = 5, k = 2
          Output: 787 23
          Explanation: 1st largest element in the array is 787 and second largest is 23.
          
          Input: arr[] = {1, 23, 12, 9, 30, 2, 50}, n = 7, k = 3 
          Output: 50 30 23
          Explanation: 3 Largest element in the array are 50, 30 and 23.

Solution : 

vector<int> kLargest(int arr[], int n, int k) {
	   // method - 1 T.C = O(nlogn)  S.C = O(1)
	   // vector<int> ans;
	   // sort(arr,arr+n);
	   // int i=0;
	   // while(k--){
	   //     ans.push_back(arr[n-i-1]);
	   //     i++;
	   // }
	   // return ans;
	   
	   //method - 2
	   //priority_queue<int,vector<int>,greater<int>> pq;
	   //int cnt=0;
	   //for(int i=0;i<n;i++){
	   //    pq.push(arr[i]);
	   //    cnt++;
	   //    if(cnt>k){
	   //        pq.pop();
	   //    }
	   //}
	   //vector<int> ans;
	   //while(!pq.empty()){
	   //    ans.push_back(pq.top());
	   //    pq.pop();
	   //}
	   //reverse(ans.begin(),ans.end());
	   //return ans;
	}
