Problem : Given a BST and a key k. If k is not present in the BST, Insert a new Node with a value equal to k into the BST. If k is already present in the BST, don't modify the
          BST. Return the root of the modified BST after inserting k. 
          Note: The generated output contains the inorder traversal of the modified tree.
          
          Examples :
          Input: k = 4
               2
             /   \   
            1     3
          Output: 1 2 3 4
          Explanation: After inserting the node 4 Inorder traversal will be 1 2 3 4.
          
          Input: k = 4
                  2
                /   \
               1     3
                       \
                        6
          Output: 1 2 3 4 6
          Explanation: After inserting the node 4 Inorder traversal of the above tree will be 1 2 3 4 6.

Solution : 

 Node* solve(Node* node,int data){
        if(node==NULL){
            node=new Node(data);
            return node;
        }
        if(node->data==data)
            return node;
        else if(node->data<data)
            node->right=solve(node->right,data);
        else 
            node->left=solve(node->left,data);
        return node;
    }
    Node* insert(Node* root, int data) {
        return solve(root,data);
    }
